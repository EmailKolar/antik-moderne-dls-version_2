version: '3.8'

services:
  # Databases
  user-db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users
    volumes:
      - user-db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  product-db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: products
    volumes:
      - product-db-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 10s
      retries: 5

  basket-db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: baskets
    volumes:
      - basket-db-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"

  order-db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders
    volumes:
      - order-db-data:/var/lib/postgresql/data
    ports:
      - "5436:5432"


  email-db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: emaildb
    volumes:
      - email-db-data:/var/lib/postgresql/data
    ports:
      - "5435:5432"

  # Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"  # AMQP
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 5s
      timeout: 10s
      retries: 5

  # Microservices
  user-service:
    build:
      context: ../backend/services/user-service
      dockerfile: ../../../docker/services/user-service.Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:postgres@user-db:5432/user_service?schema=public
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
      CLERK_SECRET_KEY: your_clerk_secret
    ports:
      - "3001:3001"
    depends_on:
      rabbitmq:
        condition: service_healthy

  product-service:
    build:
      context: ../backend/services/product-service
      dockerfile: ../../../docker/services/product-service.Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:password@product-db:5433/products?schema=public
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
    ports:
      - "3002:3002"
    depends_on:
      rabbitmq:
        condition: service_healthy
      product-db:
        condition: service_healthy

  basket-service:
    build:
      context: ../backend/services/basket-service
      dockerfile: ../../../docker/services/basket-service.Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:password@basket-db:5434/basketdb?schema=public
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
    ports:
      - "3003:3003"
    depends_on:
      rabbitmq:
        condition: service_healthy

  email-service:
    build:
      context: ../backend/services/email-service
      dockerfile: ../../../docker/services/email-service.Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:password@localhost:5435/emaildb?schema=public
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
    ports:
      - "3004:3004"
    depends_on:
      rabbitmq:
        condition: service_healthy

  order-service:
    build:
      context: ../backend/services/order-service
      dockerfile: ../../../docker/services/order-service.Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:password@localhost:5436/orderdb
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
    ports:
      - "3005:3005"
    depends_on:
      rabbitmq:
        condition: service_healthy


volumes:
  user-db-data:
  product-db-data:
  basket-db-data:
  order-db-data:
  email-db-data: